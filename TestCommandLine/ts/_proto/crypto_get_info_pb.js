/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var timestamp_pb = require('./timestamp_pb.js');
var duration_pb = require('./duration_pb.js');
var basic_types_pb = require('./basic_types_pb.js');
var query_header_pb = require('./query_header_pb.js');
var response_header_pb = require('./response_header_pb.js');
var crypto_add_live_hash_pb = require('./crypto_add_live_hash_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.proto.CryptoGetInfoQuery', null, global);
goog.exportSymbol('proto.proto.CryptoGetInfoResponse', null, global);
goog.exportSymbol('proto.proto.CryptoGetInfoResponse.AccountInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CryptoGetInfoQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CryptoGetInfoQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CryptoGetInfoQuery.displayName = 'proto.proto.CryptoGetInfoQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CryptoGetInfoQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CryptoGetInfoQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CryptoGetInfoQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && query_header_pb.QueryHeader.toObject(includeInstance, f),
    accountid: (f = msg.getAccountid()) && basic_types_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CryptoGetInfoQuery}
 */
proto.proto.CryptoGetInfoQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CryptoGetInfoQuery;
  return proto.proto.CryptoGetInfoQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CryptoGetInfoQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CryptoGetInfoQuery}
 */
proto.proto.CryptoGetInfoQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_header_pb.QueryHeader;
      reader.readMessage(value,query_header_pb.QueryHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CryptoGetInfoQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CryptoGetInfoQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CryptoGetInfoQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_header_pb.QueryHeader.serializeBinaryToWriter
    );
  }
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryHeader header = 1;
 * @return {?proto.proto.QueryHeader}
 */
proto.proto.CryptoGetInfoQuery.prototype.getHeader = function() {
  return /** @type{?proto.proto.QueryHeader} */ (
    jspb.Message.getWrapperField(this, query_header_pb.QueryHeader, 1));
};


/** @param {?proto.proto.QueryHeader|undefined} value */
proto.proto.CryptoGetInfoQuery.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CryptoGetInfoQuery.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoQuery.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountID accountID = 2;
 * @return {?proto.proto.AccountID}
 */
proto.proto.CryptoGetInfoQuery.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 2));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.CryptoGetInfoQuery.prototype.setAccountid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CryptoGetInfoQuery.prototype.clearAccountid = function() {
  this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoQuery.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CryptoGetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CryptoGetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CryptoGetInfoResponse.displayName = 'proto.proto.CryptoGetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CryptoGetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CryptoGetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CryptoGetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && response_header_pb.ResponseHeader.toObject(includeInstance, f),
    accountinfo: (f = msg.getAccountinfo()) && proto.proto.CryptoGetInfoResponse.AccountInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CryptoGetInfoResponse}
 */
proto.proto.CryptoGetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CryptoGetInfoResponse;
  return proto.proto.CryptoGetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CryptoGetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CryptoGetInfoResponse}
 */
proto.proto.CryptoGetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new response_header_pb.ResponseHeader;
      reader.readMessage(value,response_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.proto.CryptoGetInfoResponse.AccountInfo;
      reader.readMessage(value,proto.proto.CryptoGetInfoResponse.AccountInfo.deserializeBinaryFromReader);
      msg.setAccountinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CryptoGetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CryptoGetInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CryptoGetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      response_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getAccountinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.CryptoGetInfoResponse.AccountInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CryptoGetInfoResponse.AccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CryptoGetInfoResponse.AccountInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.CryptoGetInfoResponse.AccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CryptoGetInfoResponse.AccountInfo.displayName = 'proto.proto.CryptoGetInfoResponse.AccountInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.repeatedFields_ = [14,15,21,22,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CryptoGetInfoResponse.AccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CryptoGetInfoResponse.AccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: (f = msg.getAccountid()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    contractaccountid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deleted: jspb.Message.getFieldWithDefault(msg, 3, false),
    proxyaccountid: (f = msg.getProxyaccountid()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    proxyreceived: jspb.Message.getFieldWithDefault(msg, 6, 0),
    key: (f = msg.getKey()) && basic_types_pb.Key.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 8, 0),
    generatesendrecordthreshold: jspb.Message.getFieldWithDefault(msg, 9, 0),
    generatereceiverecordthreshold: jspb.Message.getFieldWithDefault(msg, 10, 0),
    receiversigrequired: jspb.Message.getFieldWithDefault(msg, 11, false),
    expirationtime: (f = msg.getExpirationtime()) && timestamp_pb.Timestamp.toObject(includeInstance, f),
    autorenewperiod: (f = msg.getAutorenewperiod()) && duration_pb.Duration.toObject(includeInstance, f),
    livehashesList: jspb.Message.toObjectList(msg.getLivehashesList(),
    crypto_add_live_hash_pb.LiveHash.toObject, includeInstance),
    tokenrelationshipsList: jspb.Message.toObjectList(msg.getTokenrelationshipsList(),
    basic_types_pb.TokenRelationship.toObject, includeInstance),
    memo: jspb.Message.getFieldWithDefault(msg, 16, ""),
    ownednfts: jspb.Message.getFieldWithDefault(msg, 17, 0),
    maxAutomaticTokenAssociations: jspb.Message.getFieldWithDefault(msg, 18, 0),
    alias: msg.getAlias_asB64(),
    ledgerId: msg.getLedgerId_asB64(),
    grantedCryptoAllowancesList: jspb.Message.toObjectList(msg.getGrantedCryptoAllowancesList(),
    basic_types_pb.GrantedCryptoAllowance.toObject, includeInstance),
    grantedNftAllowancesList: jspb.Message.toObjectList(msg.getGrantedNftAllowancesList(),
    basic_types_pb.GrantedNftAllowance.toObject, includeInstance),
    grantedTokenAllowancesList: jspb.Message.toObjectList(msg.getGrantedTokenAllowancesList(),
    basic_types_pb.GrantedTokenAllowance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CryptoGetInfoResponse.AccountInfo}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CryptoGetInfoResponse.AccountInfo;
  return proto.proto.CryptoGetInfoResponse.AccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CryptoGetInfoResponse.AccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CryptoGetInfoResponse.AccountInfo}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaccountid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 4:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setProxyaccountid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProxyreceived(value);
      break;
    case 7:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeneratesendrecordthreshold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeneratereceiverecordthreshold(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceiversigrequired(value);
      break;
    case 12:
      var value = new timestamp_pb.Timestamp;
      reader.readMessage(value,timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpirationtime(value);
      break;
    case 13:
      var value = new duration_pb.Duration;
      reader.readMessage(value,duration_pb.Duration.deserializeBinaryFromReader);
      msg.setAutorenewperiod(value);
      break;
    case 14:
      var value = new crypto_add_live_hash_pb.LiveHash;
      reader.readMessage(value,crypto_add_live_hash_pb.LiveHash.deserializeBinaryFromReader);
      msg.addLivehashes(value);
      break;
    case 15:
      var value = new basic_types_pb.TokenRelationship;
      reader.readMessage(value,basic_types_pb.TokenRelationship.deserializeBinaryFromReader);
      msg.addTokenrelationships(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwnednfts(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAutomaticTokenAssociations(value);
      break;
    case 19:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlias(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLedgerId(value);
      break;
    case 21:
      var value = new basic_types_pb.GrantedCryptoAllowance;
      reader.readMessage(value,basic_types_pb.GrantedCryptoAllowance.deserializeBinaryFromReader);
      msg.addGrantedCryptoAllowances(value);
      break;
    case 22:
      var value = new basic_types_pb.GrantedNftAllowance;
      reader.readMessage(value,basic_types_pb.GrantedNftAllowance.deserializeBinaryFromReader);
      msg.addGrantedNftAllowances(value);
      break;
    case 23:
      var value = new basic_types_pb.GrantedTokenAllowance;
      reader.readMessage(value,basic_types_pb.GrantedTokenAllowance.deserializeBinaryFromReader);
      msg.addGrantedTokenAllowances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CryptoGetInfoResponse.AccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CryptoGetInfoResponse.AccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getContractaccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getProxyaccountid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getProxyreceived();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getGeneratesendrecordthreshold();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getGeneratereceiverecordthreshold();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getReceiversigrequired();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getExpirationtime();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAutorenewperiod();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getLivehashesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      crypto_add_live_hash_pb.LiveHash.serializeBinaryToWriter
    );
  }
  f = message.getTokenrelationshipsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      basic_types_pb.TokenRelationship.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getOwnednfts();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getMaxAutomaticTokenAssociations();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getAlias_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      19,
      f
    );
  }
  f = message.getLedgerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = message.getGrantedCryptoAllowancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      basic_types_pb.GrantedCryptoAllowance.serializeBinaryToWriter
    );
  }
  f = message.getGrantedNftAllowancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      basic_types_pb.GrantedNftAllowance.serializeBinaryToWriter
    );
  }
  f = message.getGrantedTokenAllowancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      basic_types_pb.GrantedTokenAllowance.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountID accountID = 1;
 * @return {?proto.proto.AccountID}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 1));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setAccountid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearAccountid = function() {
  this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string contractAccountID = 2;
 * @return {string}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getContractaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setContractaccountid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool deleted = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional AccountID proxyAccountID = 4;
 * @return {?proto.proto.AccountID}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getProxyaccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 4));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setProxyaccountid = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearProxyaccountid = function() {
  this.setProxyaccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.hasProxyaccountid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 proxyReceived = 6;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getProxyreceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setProxyreceived = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Key key = 7;
 * @return {?proto.proto.Key}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getKey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 7));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.hasKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 balance = 8;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setBalance = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 generateSendRecordThreshold = 9;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getGeneratesendrecordthreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setGeneratesendrecordthreshold = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 generateReceiveRecordThreshold = 10;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getGeneratereceiverecordthreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setGeneratereceiverecordthreshold = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool receiverSigRequired = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getReceiversigrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setReceiversigrequired = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional Timestamp expirationTime = 12;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getExpirationtime = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, timestamp_pb.Timestamp, 12));
};


/** @param {?proto.proto.Timestamp|undefined} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setExpirationtime = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearExpirationtime = function() {
  this.setExpirationtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.hasExpirationtime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Duration autoRenewPeriod = 13;
 * @return {?proto.proto.Duration}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getAutorenewperiod = function() {
  return /** @type{?proto.proto.Duration} */ (
    jspb.Message.getWrapperField(this, duration_pb.Duration, 13));
};


/** @param {?proto.proto.Duration|undefined} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setAutorenewperiod = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearAutorenewperiod = function() {
  this.setAutorenewperiod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.hasAutorenewperiod = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated LiveHash liveHashes = 14;
 * @return {!Array.<!proto.proto.LiveHash>}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getLivehashesList = function() {
  return /** @type{!Array.<!proto.proto.LiveHash>} */ (
    jspb.Message.getRepeatedWrapperField(this, crypto_add_live_hash_pb.LiveHash, 14));
};


/** @param {!Array.<!proto.proto.LiveHash>} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setLivehashesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.proto.LiveHash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.LiveHash}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.addLivehashes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.proto.LiveHash, opt_index);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearLivehashesList = function() {
  this.setLivehashesList([]);
};


/**
 * repeated TokenRelationship tokenRelationships = 15;
 * @return {!Array.<!proto.proto.TokenRelationship>}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getTokenrelationshipsList = function() {
  return /** @type{!Array.<!proto.proto.TokenRelationship>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.TokenRelationship, 15));
};


/** @param {!Array.<!proto.proto.TokenRelationship>} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setTokenrelationshipsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.proto.TokenRelationship=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.TokenRelationship}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.addTokenrelationships = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.proto.TokenRelationship, opt_index);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearTokenrelationshipsList = function() {
  this.setTokenrelationshipsList([]);
};


/**
 * optional string memo = 16;
 * @return {string}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int64 ownedNfts = 17;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getOwnednfts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setOwnednfts = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 max_automatic_token_associations = 18;
 * @return {number}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getMaxAutomaticTokenAssociations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setMaxAutomaticTokenAssociations = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional bytes alias = 19;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getAlias = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * optional bytes alias = 19;
 * This is a type-conversion wrapper around `getAlias()`
 * @return {string}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getAlias_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlias()));
};


/**
 * optional bytes alias = 19;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlias()`
 * @return {!Uint8Array}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getAlias_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlias()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setAlias = function(value) {
  jspb.Message.setProto3BytesField(this, 19, value);
};


/**
 * optional bytes ledger_id = 20;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getLedgerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes ledger_id = 20;
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {string}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getLedgerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLedgerId()));
};


/**
 * optional bytes ledger_id = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {!Uint8Array}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getLedgerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLedgerId()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setLedgerId = function(value) {
  jspb.Message.setProto3BytesField(this, 20, value);
};


/**
 * repeated GrantedCryptoAllowance granted_crypto_allowances = 21;
 * @return {!Array.<!proto.proto.GrantedCryptoAllowance>}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getGrantedCryptoAllowancesList = function() {
  return /** @type{!Array.<!proto.proto.GrantedCryptoAllowance>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.GrantedCryptoAllowance, 21));
};


/** @param {!Array.<!proto.proto.GrantedCryptoAllowance>} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setGrantedCryptoAllowancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.proto.GrantedCryptoAllowance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.GrantedCryptoAllowance}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.addGrantedCryptoAllowances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.proto.GrantedCryptoAllowance, opt_index);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearGrantedCryptoAllowancesList = function() {
  this.setGrantedCryptoAllowancesList([]);
};


/**
 * repeated GrantedNftAllowance granted_nft_allowances = 22;
 * @return {!Array.<!proto.proto.GrantedNftAllowance>}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getGrantedNftAllowancesList = function() {
  return /** @type{!Array.<!proto.proto.GrantedNftAllowance>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.GrantedNftAllowance, 22));
};


/** @param {!Array.<!proto.proto.GrantedNftAllowance>} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setGrantedNftAllowancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.proto.GrantedNftAllowance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.GrantedNftAllowance}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.addGrantedNftAllowances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.proto.GrantedNftAllowance, opt_index);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearGrantedNftAllowancesList = function() {
  this.setGrantedNftAllowancesList([]);
};


/**
 * repeated GrantedTokenAllowance granted_token_allowances = 23;
 * @return {!Array.<!proto.proto.GrantedTokenAllowance>}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.getGrantedTokenAllowancesList = function() {
  return /** @type{!Array.<!proto.proto.GrantedTokenAllowance>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.GrantedTokenAllowance, 23));
};


/** @param {!Array.<!proto.proto.GrantedTokenAllowance>} value */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.setGrantedTokenAllowancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.proto.GrantedTokenAllowance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.GrantedTokenAllowance}
 */
proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.addGrantedTokenAllowances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.proto.GrantedTokenAllowance, opt_index);
};


proto.proto.CryptoGetInfoResponse.AccountInfo.prototype.clearGrantedTokenAllowancesList = function() {
  this.setGrantedTokenAllowancesList([]);
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.proto.ResponseHeader}
 */
proto.proto.CryptoGetInfoResponse.prototype.getHeader = function() {
  return /** @type{?proto.proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, response_header_pb.ResponseHeader, 1));
};


/** @param {?proto.proto.ResponseHeader|undefined} value */
proto.proto.CryptoGetInfoResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.CryptoGetInfoResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountInfo accountInfo = 2;
 * @return {?proto.proto.CryptoGetInfoResponse.AccountInfo}
 */
proto.proto.CryptoGetInfoResponse.prototype.getAccountinfo = function() {
  return /** @type{?proto.proto.CryptoGetInfoResponse.AccountInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.CryptoGetInfoResponse.AccountInfo, 2));
};


/** @param {?proto.proto.CryptoGetInfoResponse.AccountInfo|undefined} value */
proto.proto.CryptoGetInfoResponse.prototype.setAccountinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.CryptoGetInfoResponse.prototype.clearAccountinfo = function() {
  this.setAccountinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CryptoGetInfoResponse.prototype.hasAccountinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.proto);
