/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_types_pb = require('./basic_types_pb.js');
var query_header_pb = require('./query_header_pb.js');
var response_header_pb = require('./response_header_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.proto.ContractCallLocalQuery', null, global);
goog.exportSymbol('proto.proto.ContractCallLocalResponse', null, global);
goog.exportSymbol('proto.proto.ContractFunctionResult', null, global);
goog.exportSymbol('proto.proto.ContractLoginfo', null, global);
goog.exportSymbol('proto.proto.ContractStateChange', null, global);
goog.exportSymbol('proto.proto.StorageChange', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractLoginfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ContractLoginfo.repeatedFields_, null);
};
goog.inherits(proto.proto.ContractLoginfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractLoginfo.displayName = 'proto.proto.ContractLoginfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ContractLoginfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractLoginfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractLoginfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractLoginfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractLoginfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && basic_types_pb.ContractID.toObject(includeInstance, f),
    bloom: msg.getBloom_asB64(),
    topicList: msg.getTopicList_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractLoginfo}
 */
proto.proto.ContractLoginfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractLoginfo;
  return proto.proto.ContractLoginfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractLoginfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractLoginfo}
 */
proto.proto.ContractLoginfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.ContractID;
      reader.readMessage(value,basic_types_pb.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTopic(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractLoginfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractLoginfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractLoginfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractLoginfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTopicList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional ContractID contractID = 1;
 * @return {?proto.proto.ContractID}
 */
proto.proto.ContractLoginfo.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.ContractID, 1));
};


/** @param {?proto.proto.ContractID|undefined} value */
proto.proto.ContractLoginfo.prototype.setContractid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ContractLoginfo.prototype.clearContractid = function() {
  this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractLoginfo.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes bloom = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractLoginfo.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bloom = 2;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.proto.ContractLoginfo.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.proto.ContractLoginfo.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractLoginfo.prototype.setBloom = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes topic = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.proto.ContractLoginfo.prototype.getTopicList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes topic = 3;
 * This is a type-conversion wrapper around `getTopicList()`
 * @return {!Array.<string>}
 */
proto.proto.ContractLoginfo.prototype.getTopicList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicList()));
};


/**
 * repeated bytes topic = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.proto.ContractLoginfo.prototype.getTopicList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.proto.ContractLoginfo.prototype.setTopicList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.proto.ContractLoginfo.prototype.addTopic = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.proto.ContractLoginfo.prototype.clearTopicList = function() {
  this.setTopicList([]);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractLoginfo.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.ContractLoginfo.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.ContractLoginfo.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractLoginfo.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractFunctionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ContractFunctionResult.repeatedFields_, null);
};
goog.inherits(proto.proto.ContractFunctionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractFunctionResult.displayName = 'proto.proto.ContractFunctionResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ContractFunctionResult.repeatedFields_ = [6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractFunctionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractFunctionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractFunctionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractFunctionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && basic_types_pb.ContractID.toObject(includeInstance, f),
    contractcallresult: msg.getContractcallresult_asB64(),
    errormessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bloom: msg.getBloom_asB64(),
    gasused: jspb.Message.getFieldWithDefault(msg, 5, 0),
    loginfoList: jspb.Message.toObjectList(msg.getLoginfoList(),
    proto.proto.ContractLoginfo.toObject, includeInstance),
    createdcontractidsList: jspb.Message.toObjectList(msg.getCreatedcontractidsList(),
    basic_types_pb.ContractID.toObject, includeInstance),
    stateChangesList: jspb.Message.toObjectList(msg.getStateChangesList(),
    proto.proto.ContractStateChange.toObject, includeInstance),
    evmAddress: (f = msg.getEvmAddress()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f),
    gas: jspb.Message.getFieldWithDefault(msg, 10, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    functionparameters: msg.getFunctionparameters_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractFunctionResult}
 */
proto.proto.ContractFunctionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractFunctionResult;
  return proto.proto.ContractFunctionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractFunctionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractFunctionResult}
 */
proto.proto.ContractFunctionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.ContractID;
      reader.readMessage(value,basic_types_pb.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractcallresult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasused(value);
      break;
    case 6:
      var value = new proto.proto.ContractLoginfo;
      reader.readMessage(value,proto.proto.ContractLoginfo.deserializeBinaryFromReader);
      msg.addLoginfo(value);
      break;
    case 7:
      var value = new basic_types_pb.ContractID;
      reader.readMessage(value,basic_types_pb.ContractID.deserializeBinaryFromReader);
      msg.addCreatedcontractids(value);
      break;
    case 8:
      var value = new proto.proto.ContractStateChange;
      reader.readMessage(value,proto.proto.ContractStateChange.deserializeBinaryFromReader);
      msg.addStateChanges(value);
      break;
    case 9:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setEvmAddress(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGas(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionparameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractFunctionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractFunctionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractFunctionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractFunctionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getContractcallresult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGasused();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLoginfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.ContractLoginfo.serializeBinaryToWriter
    );
  }
  f = message.getCreatedcontractidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      basic_types_pb.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getStateChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.ContractStateChange.serializeBinaryToWriter
    );
  }
  f = message.getEvmAddress();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getFunctionparameters_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional ContractID contractID = 1;
 * @return {?proto.proto.ContractID}
 */
proto.proto.ContractFunctionResult.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.ContractID, 1));
};


/** @param {?proto.proto.ContractID|undefined} value */
proto.proto.ContractFunctionResult.prototype.setContractid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ContractFunctionResult.prototype.clearContractid = function() {
  this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractFunctionResult.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes contractCallResult = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractFunctionResult.prototype.getContractcallresult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contractCallResult = 2;
 * This is a type-conversion wrapper around `getContractcallresult()`
 * @return {string}
 */
proto.proto.ContractFunctionResult.prototype.getContractcallresult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractcallresult()));
};


/**
 * optional bytes contractCallResult = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractcallresult()`
 * @return {!Uint8Array}
 */
proto.proto.ContractFunctionResult.prototype.getContractcallresult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractcallresult()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractFunctionResult.prototype.setContractcallresult = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.proto.ContractFunctionResult.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.ContractFunctionResult.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes bloom = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractFunctionResult.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bloom = 4;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.proto.ContractFunctionResult.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.proto.ContractFunctionResult.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractFunctionResult.prototype.setBloom = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 gasUsed = 5;
 * @return {number}
 */
proto.proto.ContractFunctionResult.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.ContractFunctionResult.prototype.setGasused = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated ContractLoginfo logInfo = 6;
 * @return {!Array.<!proto.proto.ContractLoginfo>}
 */
proto.proto.ContractFunctionResult.prototype.getLoginfoList = function() {
  return /** @type{!Array.<!proto.proto.ContractLoginfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ContractLoginfo, 6));
};


/** @param {!Array.<!proto.proto.ContractLoginfo>} value */
proto.proto.ContractFunctionResult.prototype.setLoginfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.ContractLoginfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ContractLoginfo}
 */
proto.proto.ContractFunctionResult.prototype.addLoginfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.ContractLoginfo, opt_index);
};


proto.proto.ContractFunctionResult.prototype.clearLoginfoList = function() {
  this.setLoginfoList([]);
};


/**
 * repeated ContractID createdContractIDs = 7;
 * @return {!Array.<!proto.proto.ContractID>}
 */
proto.proto.ContractFunctionResult.prototype.getCreatedcontractidsList = function() {
  return /** @type{!Array.<!proto.proto.ContractID>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.ContractID, 7));
};


/** @param {!Array.<!proto.proto.ContractID>} value */
proto.proto.ContractFunctionResult.prototype.setCreatedcontractidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.ContractID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ContractID}
 */
proto.proto.ContractFunctionResult.prototype.addCreatedcontractids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.ContractID, opt_index);
};


proto.proto.ContractFunctionResult.prototype.clearCreatedcontractidsList = function() {
  this.setCreatedcontractidsList([]);
};


/**
 * repeated ContractStateChange state_changes = 8;
 * @return {!Array.<!proto.proto.ContractStateChange>}
 */
proto.proto.ContractFunctionResult.prototype.getStateChangesList = function() {
  return /** @type{!Array.<!proto.proto.ContractStateChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ContractStateChange, 8));
};


/** @param {!Array.<!proto.proto.ContractStateChange>} value */
proto.proto.ContractFunctionResult.prototype.setStateChangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.ContractStateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ContractStateChange}
 */
proto.proto.ContractFunctionResult.prototype.addStateChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.ContractStateChange, opt_index);
};


proto.proto.ContractFunctionResult.prototype.clearStateChangesList = function() {
  this.setStateChangesList([]);
};


/**
 * optional google.protobuf.BytesValue evm_address = 9;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.proto.ContractFunctionResult.prototype.getEvmAddress = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 9));
};


/** @param {?proto.google.protobuf.BytesValue|undefined} value */
proto.proto.ContractFunctionResult.prototype.setEvmAddress = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.ContractFunctionResult.prototype.clearEvmAddress = function() {
  this.setEvmAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractFunctionResult.prototype.hasEvmAddress = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 gas = 10;
 * @return {number}
 */
proto.proto.ContractFunctionResult.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.ContractFunctionResult.prototype.setGas = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 amount = 11;
 * @return {number}
 */
proto.proto.ContractFunctionResult.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.ContractFunctionResult.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bytes functionParameters = 12;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractFunctionResult.prototype.getFunctionparameters = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes functionParameters = 12;
 * This is a type-conversion wrapper around `getFunctionparameters()`
 * @return {string}
 */
proto.proto.ContractFunctionResult.prototype.getFunctionparameters_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionparameters()));
};


/**
 * optional bytes functionParameters = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionparameters()`
 * @return {!Uint8Array}
 */
proto.proto.ContractFunctionResult.prototype.getFunctionparameters_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionparameters()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractFunctionResult.prototype.setFunctionparameters = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractCallLocalQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ContractCallLocalQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractCallLocalQuery.displayName = 'proto.proto.ContractCallLocalQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractCallLocalQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractCallLocalQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractCallLocalQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractCallLocalQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && query_header_pb.QueryHeader.toObject(includeInstance, f),
    contractid: (f = msg.getContractid()) && basic_types_pb.ContractID.toObject(includeInstance, f),
    gas: jspb.Message.getFieldWithDefault(msg, 3, 0),
    functionparameters: msg.getFunctionparameters_asB64(),
    maxresultsize: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractCallLocalQuery}
 */
proto.proto.ContractCallLocalQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractCallLocalQuery;
  return proto.proto.ContractCallLocalQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractCallLocalQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractCallLocalQuery}
 */
proto.proto.ContractCallLocalQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_header_pb.QueryHeader;
      reader.readMessage(value,query_header_pb.QueryHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new basic_types_pb.ContractID;
      reader.readMessage(value,basic_types_pb.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGas(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFunctionparameters(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxresultsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractCallLocalQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractCallLocalQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractCallLocalQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractCallLocalQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_header_pb.QueryHeader.serializeBinaryToWriter
    );
  }
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFunctionparameters_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMaxresultsize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional QueryHeader header = 1;
 * @return {?proto.proto.QueryHeader}
 */
proto.proto.ContractCallLocalQuery.prototype.getHeader = function() {
  return /** @type{?proto.proto.QueryHeader} */ (
    jspb.Message.getWrapperField(this, query_header_pb.QueryHeader, 1));
};


/** @param {?proto.proto.QueryHeader|undefined} value */
proto.proto.ContractCallLocalQuery.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ContractCallLocalQuery.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractCallLocalQuery.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContractID contractID = 2;
 * @return {?proto.proto.ContractID}
 */
proto.proto.ContractCallLocalQuery.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.ContractID, 2));
};


/** @param {?proto.proto.ContractID|undefined} value */
proto.proto.ContractCallLocalQuery.prototype.setContractid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.ContractCallLocalQuery.prototype.clearContractid = function() {
  this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractCallLocalQuery.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 gas = 3;
 * @return {number}
 */
proto.proto.ContractCallLocalQuery.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.ContractCallLocalQuery.prototype.setGas = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes functionParameters = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ContractCallLocalQuery.prototype.getFunctionparameters = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes functionParameters = 4;
 * This is a type-conversion wrapper around `getFunctionparameters()`
 * @return {string}
 */
proto.proto.ContractCallLocalQuery.prototype.getFunctionparameters_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFunctionparameters()));
};


/**
 * optional bytes functionParameters = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFunctionparameters()`
 * @return {!Uint8Array}
 */
proto.proto.ContractCallLocalQuery.prototype.getFunctionparameters_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFunctionparameters()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.ContractCallLocalQuery.prototype.setFunctionparameters = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 maxResultSize = 5;
 * @return {number}
 */
proto.proto.ContractCallLocalQuery.prototype.getMaxresultsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.ContractCallLocalQuery.prototype.setMaxresultsize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractCallLocalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ContractCallLocalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractCallLocalResponse.displayName = 'proto.proto.ContractCallLocalResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractCallLocalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractCallLocalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractCallLocalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractCallLocalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && response_header_pb.ResponseHeader.toObject(includeInstance, f),
    functionresult: (f = msg.getFunctionresult()) && proto.proto.ContractFunctionResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractCallLocalResponse}
 */
proto.proto.ContractCallLocalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractCallLocalResponse;
  return proto.proto.ContractCallLocalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractCallLocalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractCallLocalResponse}
 */
proto.proto.ContractCallLocalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new response_header_pb.ResponseHeader;
      reader.readMessage(value,response_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.proto.ContractFunctionResult;
      reader.readMessage(value,proto.proto.ContractFunctionResult.deserializeBinaryFromReader);
      msg.setFunctionresult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractCallLocalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractCallLocalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractCallLocalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractCallLocalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      response_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getFunctionresult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ContractFunctionResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.proto.ResponseHeader}
 */
proto.proto.ContractCallLocalResponse.prototype.getHeader = function() {
  return /** @type{?proto.proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, response_header_pb.ResponseHeader, 1));
};


/** @param {?proto.proto.ResponseHeader|undefined} value */
proto.proto.ContractCallLocalResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ContractCallLocalResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractCallLocalResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContractFunctionResult functionResult = 2;
 * @return {?proto.proto.ContractFunctionResult}
 */
proto.proto.ContractCallLocalResponse.prototype.getFunctionresult = function() {
  return /** @type{?proto.proto.ContractFunctionResult} */ (
    jspb.Message.getWrapperField(this, proto.proto.ContractFunctionResult, 2));
};


/** @param {?proto.proto.ContractFunctionResult|undefined} value */
proto.proto.ContractCallLocalResponse.prototype.setFunctionresult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.ContractCallLocalResponse.prototype.clearFunctionresult = function() {
  this.setFunctionresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractCallLocalResponse.prototype.hasFunctionresult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ContractStateChange.repeatedFields_, null);
};
goog.inherits(proto.proto.ContractStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ContractStateChange.displayName = 'proto.proto.ContractStateChange';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ContractStateChange.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractStateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && basic_types_pb.ContractID.toObject(includeInstance, f),
    storagechangesList: jspb.Message.toObjectList(msg.getStoragechangesList(),
    proto.proto.StorageChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractStateChange}
 */
proto.proto.ContractStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractStateChange;
  return proto.proto.ContractStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractStateChange}
 */
proto.proto.ContractStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.ContractID;
      reader.readMessage(value,basic_types_pb.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 2:
      var value = new proto.proto.StorageChange;
      reader.readMessage(value,proto.proto.StorageChange.deserializeBinaryFromReader);
      msg.addStoragechanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractStateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractStateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractStateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.ContractID.serializeBinaryToWriter
    );
  }
  f = message.getStoragechangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.StorageChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContractID contractID = 1;
 * @return {?proto.proto.ContractID}
 */
proto.proto.ContractStateChange.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.ContractID, 1));
};


/** @param {?proto.proto.ContractID|undefined} value */
proto.proto.ContractStateChange.prototype.setContractid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ContractStateChange.prototype.clearContractid = function() {
  this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ContractStateChange.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StorageChange storageChanges = 2;
 * @return {!Array.<!proto.proto.StorageChange>}
 */
proto.proto.ContractStateChange.prototype.getStoragechangesList = function() {
  return /** @type{!Array.<!proto.proto.StorageChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.StorageChange, 2));
};


/** @param {!Array.<!proto.proto.StorageChange>} value */
proto.proto.ContractStateChange.prototype.setStoragechangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.StorageChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.StorageChange}
 */
proto.proto.ContractStateChange.prototype.addStoragechanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.StorageChange, opt_index);
};


proto.proto.ContractStateChange.prototype.clearStoragechangesList = function() {
  this.setStoragechangesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StorageChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StorageChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.StorageChange.displayName = 'proto.proto.StorageChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StorageChange.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StorageChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StorageChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StorageChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: msg.getSlot_asB64(),
    valueread: msg.getValueread_asB64(),
    valuewritten: (f = msg.getValuewritten()) && google_protobuf_wrappers_pb.BytesValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StorageChange}
 */
proto.proto.StorageChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StorageChange;
  return proto.proto.StorageChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StorageChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StorageChange}
 */
proto.proto.StorageChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValueread(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.BytesValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BytesValue.deserializeBinaryFromReader);
      msg.setValuewritten(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StorageChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StorageChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StorageChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StorageChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValueread_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValuewritten();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.BytesValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes slot = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.StorageChange.prototype.getSlot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes slot = 1;
 * This is a type-conversion wrapper around `getSlot()`
 * @return {string}
 */
proto.proto.StorageChange.prototype.getSlot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlot()));
};


/**
 * optional bytes slot = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlot()`
 * @return {!Uint8Array}
 */
proto.proto.StorageChange.prototype.getSlot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlot()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.StorageChange.prototype.setSlot = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes valueRead = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.StorageChange.prototype.getValueread = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes valueRead = 2;
 * This is a type-conversion wrapper around `getValueread()`
 * @return {string}
 */
proto.proto.StorageChange.prototype.getValueread_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValueread()));
};


/**
 * optional bytes valueRead = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueread()`
 * @return {!Uint8Array}
 */
proto.proto.StorageChange.prototype.getValueread_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValueread()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.StorageChange.prototype.setValueread = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.BytesValue valueWritten = 3;
 * @return {?proto.google.protobuf.BytesValue}
 */
proto.proto.StorageChange.prototype.getValuewritten = function() {
  return /** @type{?proto.google.protobuf.BytesValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BytesValue, 3));
};


/** @param {?proto.google.protobuf.BytesValue|undefined} value */
proto.proto.StorageChange.prototype.setValuewritten = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.StorageChange.prototype.clearValuewritten = function() {
  this.setValuewritten(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.StorageChange.prototype.hasValuewritten = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.proto);
