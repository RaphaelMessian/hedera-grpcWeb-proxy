/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_types_pb = require('./basic_types_pb.js');
goog.exportSymbol('proto.proto.AssessedCustomFee', null, global);
goog.exportSymbol('proto.proto.CustomFee', null, global);
goog.exportSymbol('proto.proto.FixedFee', null, global);
goog.exportSymbol('proto.proto.FractionalFee', null, global);
goog.exportSymbol('proto.proto.RoyaltyFee', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FractionalFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FractionalFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FractionalFee.displayName = 'proto.proto.FractionalFee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FractionalFee.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FractionalFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FractionalFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FractionalFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    fractionalAmount: (f = msg.getFractionalAmount()) && basic_types_pb.Fraction.toObject(includeInstance, f),
    minimumAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maximumAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    netOfTransfers: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FractionalFee}
 */
proto.proto.FractionalFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FractionalFee;
  return proto.proto.FractionalFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FractionalFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FractionalFee}
 */
proto.proto.FractionalFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.Fraction;
      reader.readMessage(value,basic_types_pb.Fraction.deserializeBinaryFromReader);
      msg.setFractionalAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinimumAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaximumAmount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNetOfTransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FractionalFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FractionalFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FractionalFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FractionalFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFractionalAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.Fraction.serializeBinaryToWriter
    );
  }
  f = message.getMinimumAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaximumAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNetOfTransfers();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Fraction fractional_amount = 1;
 * @return {?proto.proto.Fraction}
 */
proto.proto.FractionalFee.prototype.getFractionalAmount = function() {
  return /** @type{?proto.proto.Fraction} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Fraction, 1));
};


/** @param {?proto.proto.Fraction|undefined} value */
proto.proto.FractionalFee.prototype.setFractionalAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.FractionalFee.prototype.clearFractionalAmount = function() {
  this.setFractionalAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FractionalFee.prototype.hasFractionalAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 minimum_amount = 2;
 * @return {number}
 */
proto.proto.FractionalFee.prototype.getMinimumAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.FractionalFee.prototype.setMinimumAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 maximum_amount = 3;
 * @return {number}
 */
proto.proto.FractionalFee.prototype.getMaximumAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.FractionalFee.prototype.setMaximumAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool net_of_transfers = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.FractionalFee.prototype.getNetOfTransfers = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.FractionalFee.prototype.setNetOfTransfers = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FixedFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FixedFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FixedFee.displayName = 'proto.proto.FixedFee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FixedFee.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FixedFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FixedFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FixedFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    denominatingTokenId: (f = msg.getDenominatingTokenId()) && basic_types_pb.TokenID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FixedFee}
 */
proto.proto.FixedFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FixedFee;
  return proto.proto.FixedFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FixedFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FixedFee}
 */
proto.proto.FixedFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setDenominatingTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FixedFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FixedFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FixedFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FixedFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDenominatingTokenId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.proto.FixedFee.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.FixedFee.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TokenID denominating_token_id = 2;
 * @return {?proto.proto.TokenID}
 */
proto.proto.FixedFee.prototype.getDenominatingTokenId = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 2));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.FixedFee.prototype.setDenominatingTokenId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.FixedFee.prototype.clearDenominatingTokenId = function() {
  this.setDenominatingTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.FixedFee.prototype.hasDenominatingTokenId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoyaltyFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoyaltyFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoyaltyFee.displayName = 'proto.proto.RoyaltyFee';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoyaltyFee.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoyaltyFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoyaltyFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltyFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeValueFraction: (f = msg.getExchangeValueFraction()) && basic_types_pb.Fraction.toObject(includeInstance, f),
    fallbackFee: (f = msg.getFallbackFee()) && proto.proto.FixedFee.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoyaltyFee}
 */
proto.proto.RoyaltyFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoyaltyFee;
  return proto.proto.RoyaltyFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoyaltyFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoyaltyFee}
 */
proto.proto.RoyaltyFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.Fraction;
      reader.readMessage(value,basic_types_pb.Fraction.deserializeBinaryFromReader);
      msg.setExchangeValueFraction(value);
      break;
    case 2:
      var value = new proto.proto.FixedFee;
      reader.readMessage(value,proto.proto.FixedFee.deserializeBinaryFromReader);
      msg.setFallbackFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoyaltyFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoyaltyFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoyaltyFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltyFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeValueFraction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.Fraction.serializeBinaryToWriter
    );
  }
  f = message.getFallbackFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FixedFee.serializeBinaryToWriter
    );
  }
};


/**
 * optional Fraction exchange_value_fraction = 1;
 * @return {?proto.proto.Fraction}
 */
proto.proto.RoyaltyFee.prototype.getExchangeValueFraction = function() {
  return /** @type{?proto.proto.Fraction} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Fraction, 1));
};


/** @param {?proto.proto.Fraction|undefined} value */
proto.proto.RoyaltyFee.prototype.setExchangeValueFraction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.RoyaltyFee.prototype.clearExchangeValueFraction = function() {
  this.setExchangeValueFraction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoyaltyFee.prototype.hasExchangeValueFraction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FixedFee fallback_fee = 2;
 * @return {?proto.proto.FixedFee}
 */
proto.proto.RoyaltyFee.prototype.getFallbackFee = function() {
  return /** @type{?proto.proto.FixedFee} */ (
    jspb.Message.getWrapperField(this, proto.proto.FixedFee, 2));
};


/** @param {?proto.proto.FixedFee|undefined} value */
proto.proto.RoyaltyFee.prototype.setFallbackFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.RoyaltyFee.prototype.clearFallbackFee = function() {
  this.setFallbackFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoyaltyFee.prototype.hasFallbackFee = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CustomFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.CustomFee.oneofGroups_);
};
goog.inherits(proto.proto.CustomFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.CustomFee.displayName = 'proto.proto.CustomFee';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.CustomFee.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.proto.CustomFee.FeeCase = {
  FEE_NOT_SET: 0,
  FIXED_FEE: 1,
  FRACTIONAL_FEE: 2,
  ROYALTY_FEE: 4
};

/**
 * @return {proto.proto.CustomFee.FeeCase}
 */
proto.proto.CustomFee.prototype.getFeeCase = function() {
  return /** @type {proto.proto.CustomFee.FeeCase} */(jspb.Message.computeOneofCase(this, proto.proto.CustomFee.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CustomFee.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CustomFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CustomFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CustomFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    fixedFee: (f = msg.getFixedFee()) && proto.proto.FixedFee.toObject(includeInstance, f),
    fractionalFee: (f = msg.getFractionalFee()) && proto.proto.FractionalFee.toObject(includeInstance, f),
    royaltyFee: (f = msg.getRoyaltyFee()) && proto.proto.RoyaltyFee.toObject(includeInstance, f),
    feeCollectorAccountId: (f = msg.getFeeCollectorAccountId()) && basic_types_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CustomFee}
 */
proto.proto.CustomFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CustomFee;
  return proto.proto.CustomFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CustomFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CustomFee}
 */
proto.proto.CustomFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FixedFee;
      reader.readMessage(value,proto.proto.FixedFee.deserializeBinaryFromReader);
      msg.setFixedFee(value);
      break;
    case 2:
      var value = new proto.proto.FractionalFee;
      reader.readMessage(value,proto.proto.FractionalFee.deserializeBinaryFromReader);
      msg.setFractionalFee(value);
      break;
    case 4:
      var value = new proto.proto.RoyaltyFee;
      reader.readMessage(value,proto.proto.RoyaltyFee.deserializeBinaryFromReader);
      msg.setRoyaltyFee(value);
      break;
    case 3:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setFeeCollectorAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CustomFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CustomFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CustomFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CustomFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFixedFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FixedFee.serializeBinaryToWriter
    );
  }
  f = message.getFractionalFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FractionalFee.serializeBinaryToWriter
    );
  }
  f = message.getRoyaltyFee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.RoyaltyFee.serializeBinaryToWriter
    );
  }
  f = message.getFeeCollectorAccountId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional FixedFee fixed_fee = 1;
 * @return {?proto.proto.FixedFee}
 */
proto.proto.CustomFee.prototype.getFixedFee = function() {
  return /** @type{?proto.proto.FixedFee} */ (
    jspb.Message.getWrapperField(this, proto.proto.FixedFee, 1));
};


/** @param {?proto.proto.FixedFee|undefined} value */
proto.proto.CustomFee.prototype.setFixedFee = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.proto.CustomFee.oneofGroups_[0], value);
};


proto.proto.CustomFee.prototype.clearFixedFee = function() {
  this.setFixedFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CustomFee.prototype.hasFixedFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FractionalFee fractional_fee = 2;
 * @return {?proto.proto.FractionalFee}
 */
proto.proto.CustomFee.prototype.getFractionalFee = function() {
  return /** @type{?proto.proto.FractionalFee} */ (
    jspb.Message.getWrapperField(this, proto.proto.FractionalFee, 2));
};


/** @param {?proto.proto.FractionalFee|undefined} value */
proto.proto.CustomFee.prototype.setFractionalFee = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.proto.CustomFee.oneofGroups_[0], value);
};


proto.proto.CustomFee.prototype.clearFractionalFee = function() {
  this.setFractionalFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CustomFee.prototype.hasFractionalFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RoyaltyFee royalty_fee = 4;
 * @return {?proto.proto.RoyaltyFee}
 */
proto.proto.CustomFee.prototype.getRoyaltyFee = function() {
  return /** @type{?proto.proto.RoyaltyFee} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoyaltyFee, 4));
};


/** @param {?proto.proto.RoyaltyFee|undefined} value */
proto.proto.CustomFee.prototype.setRoyaltyFee = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.proto.CustomFee.oneofGroups_[0], value);
};


proto.proto.CustomFee.prototype.clearRoyaltyFee = function() {
  this.setRoyaltyFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CustomFee.prototype.hasRoyaltyFee = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccountID fee_collector_account_id = 3;
 * @return {?proto.proto.AccountID}
 */
proto.proto.CustomFee.prototype.getFeeCollectorAccountId = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 3));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.CustomFee.prototype.setFeeCollectorAccountId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.CustomFee.prototype.clearFeeCollectorAccountId = function() {
  this.setFeeCollectorAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.CustomFee.prototype.hasFeeCollectorAccountId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AssessedCustomFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.AssessedCustomFee.repeatedFields_, null);
};
goog.inherits(proto.proto.AssessedCustomFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AssessedCustomFee.displayName = 'proto.proto.AssessedCustomFee';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.AssessedCustomFee.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AssessedCustomFee.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AssessedCustomFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AssessedCustomFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AssessedCustomFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenId: (f = msg.getTokenId()) && basic_types_pb.TokenID.toObject(includeInstance, f),
    feeCollectorAccountId: (f = msg.getFeeCollectorAccountId()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    effectivePayerAccountIdList: jspb.Message.toObjectList(msg.getEffectivePayerAccountIdList(),
    basic_types_pb.AccountID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AssessedCustomFee}
 */
proto.proto.AssessedCustomFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AssessedCustomFee;
  return proto.proto.AssessedCustomFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AssessedCustomFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AssessedCustomFee}
 */
proto.proto.AssessedCustomFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 3:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setFeeCollectorAccountId(value);
      break;
    case 4:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.addEffectivePayerAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AssessedCustomFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AssessedCustomFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AssessedCustomFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AssessedCustomFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getFeeCollectorAccountId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getEffectivePayerAccountIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.proto.AssessedCustomFee.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.AssessedCustomFee.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TokenID token_id = 2;
 * @return {?proto.proto.TokenID}
 */
proto.proto.AssessedCustomFee.prototype.getTokenId = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 2));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.AssessedCustomFee.prototype.setTokenId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.AssessedCustomFee.prototype.clearTokenId = function() {
  this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AssessedCustomFee.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountID fee_collector_account_id = 3;
 * @return {?proto.proto.AccountID}
 */
proto.proto.AssessedCustomFee.prototype.getFeeCollectorAccountId = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 3));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.AssessedCustomFee.prototype.setFeeCollectorAccountId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.AssessedCustomFee.prototype.clearFeeCollectorAccountId = function() {
  this.setFeeCollectorAccountId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AssessedCustomFee.prototype.hasFeeCollectorAccountId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated AccountID effective_payer_account_id = 4;
 * @return {!Array.<!proto.proto.AccountID>}
 */
proto.proto.AssessedCustomFee.prototype.getEffectivePayerAccountIdList = function() {
  return /** @type{!Array.<!proto.proto.AccountID>} */ (
    jspb.Message.getRepeatedWrapperField(this, basic_types_pb.AccountID, 4));
};


/** @param {!Array.<!proto.proto.AccountID>} value */
proto.proto.AssessedCustomFee.prototype.setEffectivePayerAccountIdList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.AccountID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AccountID}
 */
proto.proto.AssessedCustomFee.prototype.addEffectivePayerAccountId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.AccountID, opt_index);
};


proto.proto.AssessedCustomFee.prototype.clearEffectivePayerAccountIdList = function() {
  this.setEffectivePayerAccountIdList([]);
};


goog.object.extend(exports, proto.proto);
