/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_types_pb = require('./basic_types_pb.js');
goog.exportSymbol('proto.proto.TokenMintTransactionBody', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenMintTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TokenMintTransactionBody.repeatedFields_, null);
};
goog.inherits(proto.proto.TokenMintTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenMintTransactionBody.displayName = 'proto.proto.TokenMintTransactionBody';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TokenMintTransactionBody.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenMintTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenMintTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenMintTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenMintTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && basic_types_pb.TokenID.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    metadataList: msg.getMetadataList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenMintTransactionBody}
 */
proto.proto.TokenMintTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenMintTransactionBody;
  return proto.proto.TokenMintTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenMintTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenMintTransactionBody}
 */
proto.proto.TokenMintTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenMintTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenMintTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenMintTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenMintTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMetadataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional TokenID token = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenMintTransactionBody.prototype.getToken = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 1));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.TokenMintTransactionBody.prototype.setToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenMintTransactionBody.prototype.clearToken = function() {
  this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenMintTransactionBody.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.proto.TokenMintTransactionBody.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.TokenMintTransactionBody.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated bytes metadata = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.proto.TokenMintTransactionBody.prototype.getMetadataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadataList()`
 * @return {!Array.<string>}
 */
proto.proto.TokenMintTransactionBody.prototype.getMetadataList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getMetadataList()));
};


/**
 * repeated bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadataList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.proto.TokenMintTransactionBody.prototype.getMetadataList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMetadataList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.proto.TokenMintTransactionBody.prototype.setMetadataList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.proto.TokenMintTransactionBody.prototype.addMetadata = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.proto.TokenMintTransactionBody.prototype.clearMetadataList = function() {
  this.setMetadataList([]);
};


goog.object.extend(exports, proto.proto);
