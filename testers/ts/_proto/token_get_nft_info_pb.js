/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_types_pb = require('./basic_types_pb.js');
var query_header_pb = require('./query_header_pb.js');
var response_header_pb = require('./response_header_pb.js');
var timestamp_pb = require('./timestamp_pb.js');
goog.exportSymbol('proto.proto.NftID', null, global);
goog.exportSymbol('proto.proto.TokenGetNftInfoQuery', null, global);
goog.exportSymbol('proto.proto.TokenGetNftInfoResponse', null, global);
goog.exportSymbol('proto.proto.TokenNftInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NftID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NftID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.NftID.displayName = 'proto.proto.NftID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NftID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NftID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NftID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NftID.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenid: (f = msg.getTokenid()) && basic_types_pb.TokenID.toObject(includeInstance, f),
    serialnumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NftID}
 */
proto.proto.NftID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NftID;
  return proto.proto.NftID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NftID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NftID}
 */
proto.proto.NftID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSerialnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NftID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NftID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NftID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NftID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getSerialnumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional TokenID tokenID = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.NftID.prototype.getTokenid = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 1));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.NftID.prototype.setTokenid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.NftID.prototype.clearTokenid = function() {
  this.setTokenid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.NftID.prototype.hasTokenid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 serialNumber = 2;
 * @return {number}
 */
proto.proto.NftID.prototype.getSerialnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.NftID.prototype.setSerialnumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenGetNftInfoQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenGetNftInfoQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenGetNftInfoQuery.displayName = 'proto.proto.TokenGetNftInfoQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenGetNftInfoQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenGetNftInfoQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenGetNftInfoQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetNftInfoQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && query_header_pb.QueryHeader.toObject(includeInstance, f),
    nftid: (f = msg.getNftid()) && proto.proto.NftID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenGetNftInfoQuery}
 */
proto.proto.TokenGetNftInfoQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenGetNftInfoQuery;
  return proto.proto.TokenGetNftInfoQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenGetNftInfoQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenGetNftInfoQuery}
 */
proto.proto.TokenGetNftInfoQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_header_pb.QueryHeader;
      reader.readMessage(value,query_header_pb.QueryHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.proto.NftID;
      reader.readMessage(value,proto.proto.NftID.deserializeBinaryFromReader);
      msg.setNftid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenGetNftInfoQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenGetNftInfoQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenGetNftInfoQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetNftInfoQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_header_pb.QueryHeader.serializeBinaryToWriter
    );
  }
  f = message.getNftid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.NftID.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryHeader header = 1;
 * @return {?proto.proto.QueryHeader}
 */
proto.proto.TokenGetNftInfoQuery.prototype.getHeader = function() {
  return /** @type{?proto.proto.QueryHeader} */ (
    jspb.Message.getWrapperField(this, query_header_pb.QueryHeader, 1));
};


/** @param {?proto.proto.QueryHeader|undefined} value */
proto.proto.TokenGetNftInfoQuery.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenGetNftInfoQuery.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetNftInfoQuery.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NftID nftID = 2;
 * @return {?proto.proto.NftID}
 */
proto.proto.TokenGetNftInfoQuery.prototype.getNftid = function() {
  return /** @type{?proto.proto.NftID} */ (
    jspb.Message.getWrapperField(this, proto.proto.NftID, 2));
};


/** @param {?proto.proto.NftID|undefined} value */
proto.proto.TokenGetNftInfoQuery.prototype.setNftid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TokenGetNftInfoQuery.prototype.clearNftid = function() {
  this.setNftid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetNftInfoQuery.prototype.hasNftid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenNftInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenNftInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenNftInfo.displayName = 'proto.proto.TokenNftInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenNftInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenNftInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenNftInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenNftInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nftid: (f = msg.getNftid()) && proto.proto.NftID.toObject(includeInstance, f),
    accountid: (f = msg.getAccountid()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    creationtime: (f = msg.getCreationtime()) && timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: msg.getMetadata_asB64(),
    ledgerId: msg.getLedgerId_asB64(),
    spenderId: (f = msg.getSpenderId()) && basic_types_pb.AccountID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenNftInfo}
 */
proto.proto.TokenNftInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenNftInfo;
  return proto.proto.TokenNftInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenNftInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenNftInfo}
 */
proto.proto.TokenNftInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.NftID;
      reader.readMessage(value,proto.proto.NftID.deserializeBinaryFromReader);
      msg.setNftid(value);
      break;
    case 2:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    case 3:
      var value = new timestamp_pb.Timestamp;
      reader.readMessage(value,timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreationtime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLedgerId(value);
      break;
    case 6:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setSpenderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenNftInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenNftInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenNftInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenNftInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNftid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.NftID.serializeBinaryToWriter
    );
  }
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getCreationtime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLedgerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSpenderId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
};


/**
 * optional NftID nftID = 1;
 * @return {?proto.proto.NftID}
 */
proto.proto.TokenNftInfo.prototype.getNftid = function() {
  return /** @type{?proto.proto.NftID} */ (
    jspb.Message.getWrapperField(this, proto.proto.NftID, 1));
};


/** @param {?proto.proto.NftID|undefined} value */
proto.proto.TokenNftInfo.prototype.setNftid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenNftInfo.prototype.clearNftid = function() {
  this.setNftid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenNftInfo.prototype.hasNftid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountID accountID = 2;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TokenNftInfo.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 2));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.TokenNftInfo.prototype.setAccountid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TokenNftInfo.prototype.clearAccountid = function() {
  this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenNftInfo.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp creationTime = 3;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.TokenNftInfo.prototype.getCreationtime = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, timestamp_pb.Timestamp, 3));
};


/** @param {?proto.proto.Timestamp|undefined} value */
proto.proto.TokenNftInfo.prototype.setCreationtime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.TokenNftInfo.prototype.clearCreationtime = function() {
  this.setCreationtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenNftInfo.prototype.hasCreationtime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes metadata = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TokenNftInfo.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes metadata = 4;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.proto.TokenNftInfo.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.proto.TokenNftInfo.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.TokenNftInfo.prototype.setMetadata = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes ledger_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TokenNftInfo.prototype.getLedgerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes ledger_id = 5;
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {string}
 */
proto.proto.TokenNftInfo.prototype.getLedgerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLedgerId()));
};


/**
 * optional bytes ledger_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {!Uint8Array}
 */
proto.proto.TokenNftInfo.prototype.getLedgerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLedgerId()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.TokenNftInfo.prototype.setLedgerId = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional AccountID spender_id = 6;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TokenNftInfo.prototype.getSpenderId = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 6));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.TokenNftInfo.prototype.setSpenderId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.proto.TokenNftInfo.prototype.clearSpenderId = function() {
  this.setSpenderId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenNftInfo.prototype.hasSpenderId = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenGetNftInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenGetNftInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenGetNftInfoResponse.displayName = 'proto.proto.TokenGetNftInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenGetNftInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenGetNftInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenGetNftInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetNftInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && response_header_pb.ResponseHeader.toObject(includeInstance, f),
    nft: (f = msg.getNft()) && proto.proto.TokenNftInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenGetNftInfoResponse}
 */
proto.proto.TokenGetNftInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenGetNftInfoResponse;
  return proto.proto.TokenGetNftInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenGetNftInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenGetNftInfoResponse}
 */
proto.proto.TokenGetNftInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new response_header_pb.ResponseHeader;
      reader.readMessage(value,response_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.proto.TokenNftInfo;
      reader.readMessage(value,proto.proto.TokenNftInfo.deserializeBinaryFromReader);
      msg.setNft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenGetNftInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenGetNftInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenGetNftInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetNftInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      response_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getNft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.TokenNftInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.proto.ResponseHeader}
 */
proto.proto.TokenGetNftInfoResponse.prototype.getHeader = function() {
  return /** @type{?proto.proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, response_header_pb.ResponseHeader, 1));
};


/** @param {?proto.proto.ResponseHeader|undefined} value */
proto.proto.TokenGetNftInfoResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenGetNftInfoResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetNftInfoResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenNftInfo nft = 2;
 * @return {?proto.proto.TokenNftInfo}
 */
proto.proto.TokenGetNftInfoResponse.prototype.getNft = function() {
  return /** @type{?proto.proto.TokenNftInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.TokenNftInfo, 2));
};


/** @param {?proto.proto.TokenNftInfo|undefined} value */
proto.proto.TokenGetNftInfoResponse.prototype.setNft = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TokenGetNftInfoResponse.prototype.clearNft = function() {
  this.setNft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetNftInfoResponse.prototype.hasNft = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.proto);
