/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_types_pb = require('./basic_types_pb.js');
var custom_fees_pb = require('./custom_fees_pb.js');
var query_header_pb = require('./query_header_pb.js');
var response_header_pb = require('./response_header_pb.js');
var timestamp_pb = require('./timestamp_pb.js');
var duration_pb = require('./duration_pb.js');
goog.exportSymbol('proto.proto.TokenGetInfoQuery', null, global);
goog.exportSymbol('proto.proto.TokenGetInfoResponse', null, global);
goog.exportSymbol('proto.proto.TokenInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenGetInfoQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenGetInfoQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenGetInfoQuery.displayName = 'proto.proto.TokenGetInfoQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenGetInfoQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenGetInfoQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenGetInfoQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetInfoQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && query_header_pb.QueryHeader.toObject(includeInstance, f),
    token: (f = msg.getToken()) && basic_types_pb.TokenID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenGetInfoQuery}
 */
proto.proto.TokenGetInfoQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenGetInfoQuery;
  return proto.proto.TokenGetInfoQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenGetInfoQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenGetInfoQuery}
 */
proto.proto.TokenGetInfoQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_header_pb.QueryHeader;
      reader.readMessage(value,query_header_pb.QueryHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenGetInfoQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenGetInfoQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenGetInfoQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetInfoQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_header_pb.QueryHeader.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryHeader header = 1;
 * @return {?proto.proto.QueryHeader}
 */
proto.proto.TokenGetInfoQuery.prototype.getHeader = function() {
  return /** @type{?proto.proto.QueryHeader} */ (
    jspb.Message.getWrapperField(this, query_header_pb.QueryHeader, 1));
};


/** @param {?proto.proto.QueryHeader|undefined} value */
proto.proto.TokenGetInfoQuery.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenGetInfoQuery.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetInfoQuery.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenID token = 2;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenGetInfoQuery.prototype.getToken = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 2));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.TokenGetInfoQuery.prototype.setToken = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TokenGetInfoQuery.prototype.clearToken = function() {
  this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetInfoQuery.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TokenInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.TokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenInfo.displayName = 'proto.proto.TokenInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TokenInfo.repeatedFields_ = [23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenid: (f = msg.getTokenid()) && basic_types_pb.TokenID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalsupply: jspb.Message.getFieldWithDefault(msg, 5, 0),
    treasury: (f = msg.getTreasury()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    adminkey: (f = msg.getAdminkey()) && basic_types_pb.Key.toObject(includeInstance, f),
    kyckey: (f = msg.getKyckey()) && basic_types_pb.Key.toObject(includeInstance, f),
    freezekey: (f = msg.getFreezekey()) && basic_types_pb.Key.toObject(includeInstance, f),
    wipekey: (f = msg.getWipekey()) && basic_types_pb.Key.toObject(includeInstance, f),
    supplykey: (f = msg.getSupplykey()) && basic_types_pb.Key.toObject(includeInstance, f),
    defaultfreezestatus: jspb.Message.getFieldWithDefault(msg, 12, 0),
    defaultkycstatus: jspb.Message.getFieldWithDefault(msg, 13, 0),
    deleted: jspb.Message.getFieldWithDefault(msg, 14, false),
    autorenewaccount: (f = msg.getAutorenewaccount()) && basic_types_pb.AccountID.toObject(includeInstance, f),
    autorenewperiod: (f = msg.getAutorenewperiod()) && duration_pb.Duration.toObject(includeInstance, f),
    expiry: (f = msg.getExpiry()) && timestamp_pb.Timestamp.toObject(includeInstance, f),
    memo: jspb.Message.getFieldWithDefault(msg, 18, ""),
    tokentype: jspb.Message.getFieldWithDefault(msg, 19, 0),
    supplytype: jspb.Message.getFieldWithDefault(msg, 20, 0),
    maxsupply: jspb.Message.getFieldWithDefault(msg, 21, 0),
    feeScheduleKey: (f = msg.getFeeScheduleKey()) && basic_types_pb.Key.toObject(includeInstance, f),
    customFeesList: jspb.Message.toObjectList(msg.getCustomFeesList(),
    custom_fees_pb.CustomFee.toObject, includeInstance),
    pauseKey: (f = msg.getPauseKey()) && basic_types_pb.Key.toObject(includeInstance, f),
    pauseStatus: jspb.Message.getFieldWithDefault(msg, 25, 0),
    ledgerId: msg.getLedgerId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenInfo}
 */
proto.proto.TokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenInfo;
  return proto.proto.TokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenInfo}
 */
proto.proto.TokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new basic_types_pb.TokenID;
      reader.readMessage(value,basic_types_pb.TokenID.deserializeBinaryFromReader);
      msg.setTokenid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalsupply(value);
      break;
    case 6:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setTreasury(value);
      break;
    case 7:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setAdminkey(value);
      break;
    case 8:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setKyckey(value);
      break;
    case 9:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setFreezekey(value);
      break;
    case 10:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setWipekey(value);
      break;
    case 11:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setSupplykey(value);
      break;
    case 12:
      var value = /** @type {!proto.proto.TokenFreezeStatus} */ (reader.readEnum());
      msg.setDefaultfreezestatus(value);
      break;
    case 13:
      var value = /** @type {!proto.proto.TokenKycStatus} */ (reader.readEnum());
      msg.setDefaultkycstatus(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 15:
      var value = new basic_types_pb.AccountID;
      reader.readMessage(value,basic_types_pb.AccountID.deserializeBinaryFromReader);
      msg.setAutorenewaccount(value);
      break;
    case 16:
      var value = new duration_pb.Duration;
      reader.readMessage(value,duration_pb.Duration.deserializeBinaryFromReader);
      msg.setAutorenewperiod(value);
      break;
    case 17:
      var value = new timestamp_pb.Timestamp;
      reader.readMessage(value,timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 19:
      var value = /** @type {!proto.proto.TokenType} */ (reader.readEnum());
      msg.setTokentype(value);
      break;
    case 20:
      var value = /** @type {!proto.proto.TokenSupplyType} */ (reader.readEnum());
      msg.setSupplytype(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxsupply(value);
      break;
    case 22:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setFeeScheduleKey(value);
      break;
    case 23:
      var value = new custom_fees_pb.CustomFee;
      reader.readMessage(value,custom_fees_pb.CustomFee.deserializeBinaryFromReader);
      msg.addCustomFees(value);
      break;
    case 24:
      var value = new basic_types_pb.Key;
      reader.readMessage(value,basic_types_pb.Key.deserializeBinaryFromReader);
      msg.setPauseKey(value);
      break;
    case 25:
      var value = /** @type {!proto.proto.TokenPauseStatus} */ (reader.readEnum());
      msg.setPauseStatus(value);
      break;
    case 26:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLedgerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      basic_types_pb.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTotalsupply();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTreasury();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getAdminkey();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getKyckey();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getFreezekey();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getWipekey();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getSupplykey();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getDefaultfreezestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getDefaultkycstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getAutorenewaccount();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      basic_types_pb.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getAutorenewperiod();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getTokentype();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getSupplytype();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getMaxsupply();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getFeeScheduleKey();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getCustomFeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      custom_fees_pb.CustomFee.serializeBinaryToWriter
    );
  }
  f = message.getPauseKey();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      basic_types_pb.Key.serializeBinaryToWriter
    );
  }
  f = message.getPauseStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      25,
      f
    );
  }
  f = message.getLedgerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      26,
      f
    );
  }
};


/**
 * optional TokenID tokenId = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenInfo.prototype.getTokenid = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.TokenID, 1));
};


/** @param {?proto.proto.TokenID|undefined} value */
proto.proto.TokenInfo.prototype.setTokenid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenInfo.prototype.clearTokenid = function() {
  this.setTokenid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasTokenid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.TokenInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.TokenInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.proto.TokenInfo.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.TokenInfo.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 decimals = 4;
 * @return {number}
 */
proto.proto.TokenInfo.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.TokenInfo.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 totalSupply = 5;
 * @return {number}
 */
proto.proto.TokenInfo.prototype.getTotalsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.TokenInfo.prototype.setTotalsupply = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional AccountID treasury = 6;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TokenInfo.prototype.getTreasury = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 6));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.TokenInfo.prototype.setTreasury = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.proto.TokenInfo.prototype.clearTreasury = function() {
  this.setTreasury(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasTreasury = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Key adminKey = 7;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getAdminkey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 7));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setAdminkey = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.TokenInfo.prototype.clearAdminkey = function() {
  this.setAdminkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasAdminkey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Key kycKey = 8;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getKyckey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 8));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setKyckey = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.TokenInfo.prototype.clearKyckey = function() {
  this.setKyckey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasKyckey = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Key freezeKey = 9;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getFreezekey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 9));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setFreezekey = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.TokenInfo.prototype.clearFreezekey = function() {
  this.setFreezekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasFreezekey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Key wipeKey = 10;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getWipekey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 10));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setWipekey = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.TokenInfo.prototype.clearWipekey = function() {
  this.setWipekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasWipekey = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Key supplyKey = 11;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getSupplykey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 11));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setSupplykey = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.TokenInfo.prototype.clearSupplykey = function() {
  this.setSupplykey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasSupplykey = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TokenFreezeStatus defaultFreezeStatus = 12;
 * @return {!proto.proto.TokenFreezeStatus}
 */
proto.proto.TokenInfo.prototype.getDefaultfreezestatus = function() {
  return /** @type {!proto.proto.TokenFreezeStatus} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.proto.TokenFreezeStatus} value */
proto.proto.TokenInfo.prototype.setDefaultfreezestatus = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional TokenKycStatus defaultKycStatus = 13;
 * @return {!proto.proto.TokenKycStatus}
 */
proto.proto.TokenInfo.prototype.getDefaultkycstatus = function() {
  return /** @type {!proto.proto.TokenKycStatus} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.proto.TokenKycStatus} value */
proto.proto.TokenInfo.prototype.setDefaultkycstatus = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional bool deleted = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.TokenInfo.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.proto.TokenInfo.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional AccountID autoRenewAccount = 15;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TokenInfo.prototype.getAutorenewaccount = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.AccountID, 15));
};


/** @param {?proto.proto.AccountID|undefined} value */
proto.proto.TokenInfo.prototype.setAutorenewaccount = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.proto.TokenInfo.prototype.clearAutorenewaccount = function() {
  this.setAutorenewaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasAutorenewaccount = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Duration autoRenewPeriod = 16;
 * @return {?proto.proto.Duration}
 */
proto.proto.TokenInfo.prototype.getAutorenewperiod = function() {
  return /** @type{?proto.proto.Duration} */ (
    jspb.Message.getWrapperField(this, duration_pb.Duration, 16));
};


/** @param {?proto.proto.Duration|undefined} value */
proto.proto.TokenInfo.prototype.setAutorenewperiod = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.proto.TokenInfo.prototype.clearAutorenewperiod = function() {
  this.setAutorenewperiod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasAutorenewperiod = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Timestamp expiry = 17;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.TokenInfo.prototype.getExpiry = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, timestamp_pb.Timestamp, 17));
};


/** @param {?proto.proto.Timestamp|undefined} value */
proto.proto.TokenInfo.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.proto.TokenInfo.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string memo = 18;
 * @return {string}
 */
proto.proto.TokenInfo.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.proto.TokenInfo.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional TokenType tokenType = 19;
 * @return {!proto.proto.TokenType}
 */
proto.proto.TokenInfo.prototype.getTokentype = function() {
  return /** @type {!proto.proto.TokenType} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.proto.TokenType} value */
proto.proto.TokenInfo.prototype.setTokentype = function(value) {
  jspb.Message.setProto3EnumField(this, 19, value);
};


/**
 * optional TokenSupplyType supplyType = 20;
 * @return {!proto.proto.TokenSupplyType}
 */
proto.proto.TokenInfo.prototype.getSupplytype = function() {
  return /** @type {!proto.proto.TokenSupplyType} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {!proto.proto.TokenSupplyType} value */
proto.proto.TokenInfo.prototype.setSupplytype = function(value) {
  jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional int64 maxSupply = 21;
 * @return {number}
 */
proto.proto.TokenInfo.prototype.getMaxsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.proto.TokenInfo.prototype.setMaxsupply = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional Key fee_schedule_key = 22;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getFeeScheduleKey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 22));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setFeeScheduleKey = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.proto.TokenInfo.prototype.clearFeeScheduleKey = function() {
  this.setFeeScheduleKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasFeeScheduleKey = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * repeated CustomFee custom_fees = 23;
 * @return {!Array.<!proto.proto.CustomFee>}
 */
proto.proto.TokenInfo.prototype.getCustomFeesList = function() {
  return /** @type{!Array.<!proto.proto.CustomFee>} */ (
    jspb.Message.getRepeatedWrapperField(this, custom_fees_pb.CustomFee, 23));
};


/** @param {!Array.<!proto.proto.CustomFee>} value */
proto.proto.TokenInfo.prototype.setCustomFeesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.proto.CustomFee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.CustomFee}
 */
proto.proto.TokenInfo.prototype.addCustomFees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.proto.CustomFee, opt_index);
};


proto.proto.TokenInfo.prototype.clearCustomFeesList = function() {
  this.setCustomFeesList([]);
};


/**
 * optional Key pause_key = 24;
 * @return {?proto.proto.Key}
 */
proto.proto.TokenInfo.prototype.getPauseKey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, basic_types_pb.Key, 24));
};


/** @param {?proto.proto.Key|undefined} value */
proto.proto.TokenInfo.prototype.setPauseKey = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.proto.TokenInfo.prototype.clearPauseKey = function() {
  this.setPauseKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenInfo.prototype.hasPauseKey = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional TokenPauseStatus pause_status = 25;
 * @return {!proto.proto.TokenPauseStatus}
 */
proto.proto.TokenInfo.prototype.getPauseStatus = function() {
  return /** @type {!proto.proto.TokenPauseStatus} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {!proto.proto.TokenPauseStatus} value */
proto.proto.TokenInfo.prototype.setPauseStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 25, value);
};


/**
 * optional bytes ledger_id = 26;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TokenInfo.prototype.getLedgerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * optional bytes ledger_id = 26;
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {string}
 */
proto.proto.TokenInfo.prototype.getLedgerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLedgerId()));
};


/**
 * optional bytes ledger_id = 26;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLedgerId()`
 * @return {!Uint8Array}
 */
proto.proto.TokenInfo.prototype.getLedgerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLedgerId()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.TokenInfo.prototype.setLedgerId = function(value) {
  jspb.Message.setProto3BytesField(this, 26, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenGetInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenGetInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.TokenGetInfoResponse.displayName = 'proto.proto.TokenGetInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenGetInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenGetInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenGetInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && response_header_pb.ResponseHeader.toObject(includeInstance, f),
    tokeninfo: (f = msg.getTokeninfo()) && proto.proto.TokenInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenGetInfoResponse}
 */
proto.proto.TokenGetInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenGetInfoResponse;
  return proto.proto.TokenGetInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenGetInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenGetInfoResponse}
 */
proto.proto.TokenGetInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new response_header_pb.ResponseHeader;
      reader.readMessage(value,response_header_pb.ResponseHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.proto.TokenInfo;
      reader.readMessage(value,proto.proto.TokenInfo.deserializeBinaryFromReader);
      msg.setTokeninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenGetInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenGetInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenGetInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenGetInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      response_header_pb.ResponseHeader.serializeBinaryToWriter
    );
  }
  f = message.getTokeninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.TokenInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseHeader header = 1;
 * @return {?proto.proto.ResponseHeader}
 */
proto.proto.TokenGetInfoResponse.prototype.getHeader = function() {
  return /** @type{?proto.proto.ResponseHeader} */ (
    jspb.Message.getWrapperField(this, response_header_pb.ResponseHeader, 1));
};


/** @param {?proto.proto.ResponseHeader|undefined} value */
proto.proto.TokenGetInfoResponse.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.TokenGetInfoResponse.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetInfoResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenInfo tokenInfo = 2;
 * @return {?proto.proto.TokenInfo}
 */
proto.proto.TokenGetInfoResponse.prototype.getTokeninfo = function() {
  return /** @type{?proto.proto.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.TokenInfo, 2));
};


/** @param {?proto.proto.TokenInfo|undefined} value */
proto.proto.TokenGetInfoResponse.prototype.setTokeninfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.TokenGetInfoResponse.prototype.clearTokeninfo = function() {
  this.setTokeninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.TokenGetInfoResponse.prototype.hasTokeninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.proto);
